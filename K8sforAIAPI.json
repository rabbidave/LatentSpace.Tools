{
  "openapi": "3.0.0",
  "info": {
    "title": "Per-Integration AI Control Plane API",
    "version": "v1",
    "description": "K8s-patterned API for managing AI model integrations with granular role-based access. This API supports an asynchronous integration pattern for processing data, particularly restricted data, with distinct roles: Infrastructure Provider (configures health checks), Cluster Operator (manages runtime and model validation), and Application Developer (creates batch processing jobs). The API emphasizes data classification (Public, Internal, Confidential, Restricted) throughout the process."
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "paths": {
    "/config/healthchecks": {
      "post": {
        "summary": "Define health check configuration",
        "description": "Infrastructure provider endpoint for configuring health check parameters",
        "tags": ["Infrastructure"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckConfig"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Health check configuration created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckConfig"
                }
              }
            }
          }
        }
      }
    },
    "/runtime/models/{modelId}/validate": {
      "post": {
        "summary": "Validate model binary",
        "description": "Validate model binary hash and metadata before processing. This endpoint is part of the asynchronous restricted data processing flow. The process involves: 1. A Kafka consumer receiving the model binary. 2. Checking the data classification for restricted data handling. 3. Initiating the validation chain, including hash comparison and other checks.",
        "tags": ["Cluster"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelValidationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Model validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationResult"
                }
              }
            }
          }
        }
      }
    },
    "/integrations/batch": {
      "post": {
        "summary": "Create batch processing job",
        "description": "Application developer endpoint for configuring batch processing. This endpoint allows the creation of batch jobs for processing data with a specified model. The process aligns with the Application Developer's role in managing model binary and processing configurations.",
        "tags": ["Application"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchProcessingConfig"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Batch processing job created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchJob"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DataClassification": {
        "type": "string",
        "enum": ["Public", "Internal", "Confidential", "Restricted"],
        "description": "PICR data classification levels"
      },
      "HealthCheckConfig": {
        "type": "object",
        "required": ["name", "targetMetric", "dataClassification", "quickAlertHeuristic"],
        "properties": {
          "name": {
            "type": "string"
          },
          "targetMetric": {
            "type": "string"
          },
          "dataClassification": {
            "$ref": "#/components/schemas/DataClassification"
          },
          "quickAlertHeuristic": {
            "type": "object",
            "properties": {
              "threshold": {
                "type": "number"
              },
              "window": {
                "type": "string",
                "format": "duration"
              }
            }
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ModelValidationRequest": {
        "type": "object",
        "required": ["modelHash", "dataClassification"],
        "properties": {
          "modelHash": {
            "type": "string",
            "description": "SHA256 hash of model binary. Applicable data classifications: Public, Internal, Confidential, Restricted."
          },
          "dataClassification": {
            "$ref": "#/components/schemas/DataClassification"
          },
          "validationParameters": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "ValidationResult": {
        "type": "object",
        "required": ["valid", "timestamp"],
        "properties": {
          "valid": {
            "type": "boolean"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "details": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "BatchProcessingConfig": {
        "type": "object",
        "required": ["modelId", "dataSource", "dataClassification"],
        "properties": {
          "modelId": {
            "type": "string"
          },
          "dataSource": {
            "type": "string"
          },
          "dataClassification": {
            "$ref": "#/components/schemas/DataClassification"
          },
          "processingParameters": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "BatchJob": {
        "type": "object",
        "required": ["jobId", "status"],
        "properties": {
          "jobId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["Pending", "Running", "Completed", "Failed"]
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "metrics": {
            "type": "object",
            "additionalProperties": true
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Infrastructure",
      "description": "Infrastructure provider endpoints"
    },
    {
      "name": "Cluster",
      "description": "Cluster operator endpoints"
    },
    {
      "name": "Application",
      "description": "Application developer endpoints"
    }
  ]
}